name: 'AWS EFS Volume'
description: 'Manage AWS EFS volume for Lambda functions using Terraform'
author: 'alonch'
branding:
  icon: 'database'
  color: 'orange'

inputs:
  action:
    description: 'Desired outcome: apply, plan or destroy'
    required: false
    default: 'apply'
  name:
    description: 'EFS volume name - will be used as the Name tag for the EFS'
    required: true

outputs:
  efs_arn:
    description: 'ARN of the EFS file system'
    value: ${{ steps.outputs.outputs.efs_arn }}
  efs_id:
    description: 'ID of the EFS file system'
    value: ${{ steps.outputs.outputs.efs_id }}
  mount_targets:
    description: 'List of EFS mount target IDs in target subnets'
    value: ${{ steps.outputs.outputs.mount_targets }}
  access_point_arn:
    description: 'ARN of the EFS access point'
    value: ${{ steps.outputs.outputs.access_point_arn }}

runs:
  using: "composite"
  steps:
    - name: Terraform init for apply/plan
      if: inputs.action != 'destroy'
      run: |
        terraform init \
          -backend-config="bucket=$TF_BACKEND_s3" \
          -backend-config="dynamodb_table=$TF_BACKEND_dynamodb" \
          -backend-config="key=$TF_BACKEND_key"
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_BACKEND_key: "actions-aws-volume/${{ inputs.name }}"
        TF_VAR_name: ${{ inputs.name }}

    - name: Terraform plan
      if: inputs.action == 'plan'
      run: terraform plan
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_VAR_name: ${{ inputs.name }}

    - name: Terraform init and destroy
      if: inputs.action == 'destroy'
      run: |
        echo "Initializing Terraform for destroy operation..."
        terraform init \
          -backend-config="bucket=$TF_BACKEND_s3" \
          -backend-config="dynamodb_table=$TF_BACKEND_dynamodb" \
          -backend-config="key=$TF_BACKEND_key"

        echo "Destroying resources..."
        terraform destroy -auto-approve
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_BACKEND_key: "actions-aws-volume/${{ inputs.name }}"
        TF_VAR_name: ${{ inputs.name }}

    - name: Terraform apply
      id: terraform
      if: inputs.action == 'apply'
      run: |
        terraform apply -auto-approve
        EFS_ARN=$(terraform output -raw efs_arn | tr -d '\r\n')
        EFS_ID=$(terraform output -raw efs_id | tr -d '\r\n')
        MOUNT_TARGETS=$(terraform output -json mount_targets | tr -d '\r\n')
        ACCESS_POINT_ARN=$(terraform output -raw access_point_arn | tr -d '\r\n')

        # Set outputs temporarily
        echo "efs_arn=$EFS_ARN" >> "$GITHUB_OUTPUT"
        echo "efs_id=$EFS_ID" >> "$GITHUB_OUTPUT"
        echo "mount_targets=$MOUNT_TARGETS" >> "$GITHUB_OUTPUT"
        echo "access_point_arn=$ACCESS_POINT_ARN" >> "$GITHUB_OUTPUT"
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        TF_VAR_name: ${{ inputs.name }}

    - name: Set final outputs
      id: outputs
      shell: bash
      run: |
        if [ "${{ inputs.action }}" == "destroy" ]; then
          # For destroy action, we don't have meaningful outputs
          echo "efs_id=destroyed" >> "$GITHUB_OUTPUT"
          echo "efs_arn=destroyed" >> "$GITHUB_OUTPUT"
          echo "mount_targets=destroyed" >> "$GITHUB_OUTPUT"
          echo "access_point_arn=destroyed" >> "$GITHUB_OUTPUT"
        else
          # Always use Terraform outputs for apply/plan actions
          echo "efs_id=${{ steps.terraform.outputs.efs_id }}" >> "$GITHUB_OUTPUT"
          echo "efs_arn=${{ steps.terraform.outputs.efs_arn }}" >> "$GITHUB_OUTPUT"
          echo "mount_targets=${{ steps.terraform.outputs.mount_targets }}" >> "$GITHUB_OUTPUT"
          echo "access_point_arn=${{ steps.terraform.outputs.access_point_arn }}" >> "$GITHUB_OUTPUT"
        fi